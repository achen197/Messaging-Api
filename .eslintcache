[{"/home/michael/Documents/code/Messaging-Api/src/index.tsx":"1","/home/michael/Documents/code/Messaging-Api/src/reportWebVitals.ts":"2","/home/michael/Documents/code/Messaging-Api/src/App.tsx":"3","/home/michael/Documents/code/Messaging-Api/src/Routes.tsx":"4","/home/michael/Documents/code/Messaging-Api/src/views/Messages/Messages.tsx":"5","/home/michael/Documents/code/Messaging-Api/src/components/Shell/Shell.tsx":"6","/home/michael/Documents/code/Messaging-Api/src/views/Welcome/Welcome.tsx":"7","/home/michael/Documents/code/Messaging-Api/src/views/Login/Login.tsx":"8","/home/michael/Documents/code/Messaging-Api/src/services/api.ts":"9","/home/michael/Documents/code/Messaging-Api/src/views/Messages/MessageDetail.tsx":"10","/home/michael/Documents/code/Messaging-Api/src/views/Messages/MessagesList.tsx":"11","/home/michael/Documents/code/Messaging-Api/src/components/LoadingIndicator/LoadingIndicator.tsx":"12","/home/michael/Documents/code/Messaging-Api/src/components/Navigation/Navigation.tsx":"13","/home/michael/Documents/code/Messaging-Api/src/views/Subscriptions/Subscriptions.tsx":"14"},{"size":500,"mtime":1611373857177,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1611373857177,"results":"17","hashOfConfig":"16"},{"size":395,"mtime":1613687177578,"results":"18","hashOfConfig":"16"},{"size":917,"mtime":1615787937968,"results":"19","hashOfConfig":"16"},{"size":1578,"mtime":1615792720637,"results":"20","hashOfConfig":"16"},{"size":392,"mtime":1611538635722,"results":"21","hashOfConfig":"16"},{"size":453,"mtime":1615790006856,"results":"22","hashOfConfig":"16"},{"size":1029,"mtime":1615794215560,"results":"23","hashOfConfig":"16"},{"size":1062,"mtime":1615794478865,"results":"24","hashOfConfig":"16"},{"size":1258,"mtime":1611538635722,"results":"25","hashOfConfig":"16"},{"size":2033,"mtime":1613687177578,"results":"26","hashOfConfig":"16"},{"size":475,"mtime":1613687305304,"results":"27","hashOfConfig":"16"},{"size":3030,"mtime":1615787731880,"results":"28","hashOfConfig":"16"},{"size":2424,"mtime":1615795375924,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"r1c2v6",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/michael/Documents/code/Messaging-Api/src/index.tsx",[],["61","62"],"/home/michael/Documents/code/Messaging-Api/src/reportWebVitals.ts",[],"/home/michael/Documents/code/Messaging-Api/src/App.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/Routes.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/views/Messages/Messages.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/components/Shell/Shell.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/views/Welcome/Welcome.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/views/Login/Login.tsx",["63","64"],"import { Button, Grid, TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { login } from \"../../services/api\";\n\nexport const Login = () => {\n  const [email, setEmail] = useState<String>('');\n  const [password, setPassword] = useState<String>('');\n  const [isLoading, setIsLoading] = useState<Boolean>(false)\n  function handleSubmit(e:React.FormEvent<HTMLInputElement>){\n    e.preventDefault()\n    login(email, password)\n  } \n  return(\n    <Grid\n      spacing={1}\n      container\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item onSubmit={handleSubmit}>\n        <form noValidate autoComplete=\"off\">\n          <TextField variant=\"outlined\" label=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n          <TextField type=\"password\" variant=\"outlined\" label=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\n          <Button type=\"submit\">Login</Button>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","/home/michael/Documents/code/Messaging-Api/src/services/api.ts",[],"/home/michael/Documents/code/Messaging-Api/src/views/Messages/MessageDetail.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/views/Messages/MessagesList.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/components/LoadingIndicator/LoadingIndicator.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/components/Navigation/Navigation.tsx",["65","66"],"import {\n  AppBar,\n  Button,\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport {\n  EditOutlined,\n  MessageOutlined,\n  SettingsOutlined,\n} from \"@material-ui/icons\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport logo from \"../../assets/images/paper-plane.png\";\nimport { SubscriptionDto } from \"../../models/interfaces\";\nimport { getSubscriptions } from \"../../services/api\";\nimport styles from \"./Navigation.module.scss\";\n\nexport const Navigation = () => {\n  const [subscription, setSubscription] = useState<SubscriptionDto>();\n\n  const location = useLocation();\n\n  useEffect(() => {\n    getSubscriptions()\n      .then((res) => {\n        setSubscription(res[0]);\n      })\n      .catch((e) => toast.error(\"Error retrieving subscription\"));\n  }, []);\n\n  return (\n    <>\n      {location.pathname !== \"/\" ? (\n        <Drawer\n          className={styles.navigation}\n          classes={{ paper: styles.paper }}\n          variant=\"permanent\"\n          anchor=\"left\"\n        >\n          <Toolbar>\n            <img src={logo} alt=\"Logo\" />\n            <Typography variant=\"h6\" noWrap>\n              Not Atlassian\n            </Typography>\n          </Toolbar>\n          <Divider />\n          <div className={styles.items}>\n            <List>\n              <Link to=\"/messages\">\n                <ListItem button>\n                  <ListItemIcon>\n                    <MessageOutlined />\n                  </ListItemIcon>\n                  <ListItemText primary=\"Messages\" />\n                </ListItem>\n              </Link>\n              <Link to=\"/subscriptions\">\n                <ListItem button>\n                  <ListItemIcon>\n                    <EditOutlined />\n                  </ListItemIcon>\n                  <ListItemText primary=\"Subscriptions\" />\n                </ListItem>\n              </Link>\n              <Link to=\"/settings\">\n                <ListItem button>\n                  <ListItemIcon>\n                    <SettingsOutlined />\n                  </ListItemIcon>\n                  <ListItemText primary=\"Settings\" />\n                </ListItem>\n              </Link>\n            </List>\n            {subscription && (\n              <List>\n                <ListItem>\n                  <ListItemText\n                    primary={\"Subscription Details\"}\n                    secondary={\n                      <span className={styles.subscriptionDetails}>\n                        {subscription.number}\n                        <span>\n                          Subscription expires{\" \"}\n                          {moment(subscription.expires).format(\"DD/MM/YYYY\")}\n                        </span>\n                      </span>\n                    }\n                  />\n                </ListItem>\n              </List>\n            )}\n          </div>\n        </Drawer>\n      ) : null}\n    </>\n  );\n};\n","/home/michael/Documents/code/Messaging-Api/src/views/Subscriptions/Subscriptions.tsx",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":8,"column":10,"nodeType":"73","messageId":"74","endLine":8,"endColumn":19},{"ruleId":"71","severity":1,"message":"75","line":8,"column":21,"nodeType":"73","messageId":"74","endLine":8,"endColumn":33},{"ruleId":"71","severity":1,"message":"76","line":2,"column":3,"nodeType":"73","messageId":"74","endLine":2,"endColumn":9},{"ruleId":"71","severity":1,"message":"77","line":3,"column":3,"nodeType":"73","messageId":"74","endLine":3,"endColumn":9},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"@typescript-eslint/no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","'setIsLoading' is assigned a value but never used.","'AppBar' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]