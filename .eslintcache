[{"/home/michael/Documents/code/Messaging-Api/src/index.tsx":"1","/home/michael/Documents/code/Messaging-Api/src/reportWebVitals.ts":"2","/home/michael/Documents/code/Messaging-Api/src/App.tsx":"3","/home/michael/Documents/code/Messaging-Api/src/Routes.tsx":"4","/home/michael/Documents/code/Messaging-Api/src/views/Messages/Messages.tsx":"5","/home/michael/Documents/code/Messaging-Api/src/components/Shell/Shell.tsx":"6","/home/michael/Documents/code/Messaging-Api/src/views/Welcome/Welcome.tsx":"7","/home/michael/Documents/code/Messaging-Api/src/views/Login/Login.tsx":"8","/home/michael/Documents/code/Messaging-Api/src/services/api.ts":"9","/home/michael/Documents/code/Messaging-Api/src/views/Messages/MessageDetail.tsx":"10","/home/michael/Documents/code/Messaging-Api/src/views/Messages/MessagesList.tsx":"11","/home/michael/Documents/code/Messaging-Api/src/components/LoadingIndicator/LoadingIndicator.tsx":"12","/home/michael/Documents/code/Messaging-Api/src/components/Navigation/Navigation.tsx":"13"},{"size":500,"mtime":1611373857177,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1611373857177,"results":"16","hashOfConfig":"15"},{"size":367,"mtime":1611373857177,"results":"17","hashOfConfig":"15"},{"size":934,"mtime":1611580510284,"results":"18","hashOfConfig":"15"},{"size":1533,"mtime":1611580501116,"results":"19","hashOfConfig":"15"},{"size":392,"mtime":1611538635722,"results":"20","hashOfConfig":"15"},{"size":453,"mtime":1611580510284,"results":"21","hashOfConfig":"15"},{"size":576,"mtime":1611581906183,"results":"22","hashOfConfig":"15"},{"size":834,"mtime":1611629113794,"results":"23","hashOfConfig":"15"},{"size":1258,"mtime":1611538635722,"results":"24","hashOfConfig":"15"},{"size":1996,"mtime":1611538635722,"results":"25","hashOfConfig":"15"},{"size":475,"mtime":1611538635718,"results":"26","hashOfConfig":"15"},{"size":2789,"mtime":1611580510284,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"r1c2v6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/michael/Documents/code/Messaging-Api/src/index.tsx",[],["57","58"],"/home/michael/Documents/code/Messaging-Api/src/reportWebVitals.ts",[],"/home/michael/Documents/code/Messaging-Api/src/App.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/Routes.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/views/Messages/Messages.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/components/Shell/Shell.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/views/Welcome/Welcome.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/views/Login/Login.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/services/api.ts",[],"/home/michael/Documents/code/Messaging-Api/src/views/Messages/MessageDetail.tsx",[],"/home/michael/Documents/code/Messaging-Api/src/views/Messages/MessagesList.tsx",["59"],"import {\n  Box,\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  Typography,\n  Divider,\n} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { MessageDto } from \"../../models/interfaces\";\nimport styles from \"./Messages.module.scss\";\n\ninterface IMessagesListProps {\n  messages: MessageDto[];\n  selectedMessage: MessageDto | undefined;\n  setSelectedMessage: (value: MessageDto) => void;\n}\n\nexport const MessagesList = (props: IMessagesListProps) => {\n  return (\n    <Box className={styles.list}>\n      {props.messages.length > 0 ? (\n        props.messages.map((m, i) => (\n          <List key={i} className={styles.message}>\n            <ListItem\n              button\n              onClick={() =>\n                props.setSelectedMessage && props.setSelectedMessage(m)\n              }\n              alignItems=\"flex-start\"\n              classes={{ selected: styles.messageSelected, button: styles.messageButton}}\n              className={styles.messageListContainer}\n              selected={props.selectedMessage === m}\n            >\n              <ListItemAvatar>\n                <Avatar classes={{ root: styles.avatar }}>?</Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={\n                  <div className={styles.messageTitle}>\n                    {m.from}\n                    <span>\n                      {moment.unix(parseInt(m.received)).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </div>\n                }\n                secondary={\n                  <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    className={styles.inline}\n                    color=\"textSecondary\"\n                  >\n                    {m.body}\n                  </Typography>\n                }\n              />\n            </ListItem>\n          </List>\n        ))\n      ) : (\n        <>You have no messages</>\n      )}\n    </Box>\n  );\n};\n","/home/michael/Documents/code/Messaging-Api/src/components/LoadingIndicator/LoadingIndicator.tsx",[],["60","61"],"/home/michael/Documents/code/Messaging-Api/src/components/Navigation/Navigation.tsx",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":9,"column":3,"nodeType":"68","messageId":"69","endLine":9,"endColumn":10},{"ruleId":"62","replacedBy":"70"},{"ruleId":"64","replacedBy":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar",["72"],["73"],"no-global-assign","no-unsafe-negation"]